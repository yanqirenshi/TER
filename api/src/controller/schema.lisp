(in-package :ter.api.controller)

(defclass schema ()
  ((%id         :accessor %id         :initarg :%id         :initform nil)
   (code        :accessor code        :initarg :code        :initform nil)
   (name        :accessor name        :initarg :name        :initform nil)
   (description :accessor description :initarg :description :initform nil)
   (cameras     :accessor cameras     :initarg :cameras     :initform nil)))

(defmethod jojo:%to-json ((obj schema))
  (jojo:with-object
    (jojo:write-key-value "_id"             (slot-value obj '%id))
    (jojo:write-key-value "code"            (slot-value obj 'code))
    (jojo:write-key-value "name"            (slot-value obj 'name))
    (jojo:write-key-value "description"     (or (slot-value obj 'description) ""))
    (jojo:write-key-value "cameras"         (or (slot-value obj 'cameras) nil))
    (jojo:write-key-value "_class"          "SCHEMA")))

(defun schema2schema (schema &key graph modeler)
  (let ((new-schema (make-instance 'schema)))
    (setf (%id new-schema)         (up:%id schema))
    (setf (name new-schema)        (ter::name schema))
    (setf (code new-schema)        (ter::code schema))
    (setf (description new-schema) (ter::description schema))
    (when (and graph modeler)
      (setf (cameras new-schema)
            (mapcar #'(lambda (camera)
                        (list :|owner| (modeler2modeler modeler)
                              :|camera| camera))
                    (ter::find-to-cameras graph schema :modeler modeler))))
    new-schema))
