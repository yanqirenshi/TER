(in-package :ter)

(defgeneric tx-make-relationship (from to &key type)
  (:method ((from resource) (to resource) &key (type :comparative))
    (cond ((eq :comparative type) (tx-make-relationship-rsc2rsc-th from to))
          ((eq :recursion   type) (tx-make-relationship-rsc2rsc-rec from to))
          ((eq :detail      type) (tx-make-relationship-rsc2rsc-dtl from to))
          (t (error "bad type. type=~a" type))))
  (:method ((from resource) (to event) &key type)
    (declare (ignore type))
    (tx-make-relationship-rsc2evt-to from to))
  (:method ((from event) (to event) &key type)
    (declare (ignore type))
    (tx-make-relationship-evt2evt-to from to))
  (:method (from to &key type)
    (declare (ignore type))
    (error "Bad combination. from=~a, to=~a" from to)))
